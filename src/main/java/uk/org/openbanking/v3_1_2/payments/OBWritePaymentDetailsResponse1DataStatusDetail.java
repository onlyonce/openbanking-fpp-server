/*
 * This Source Code Form is subject to the terms of the Mozilla
 * Public License, v. 2.0. If a copy of the MPL was not distributed
 * with this file, You can obtain one at
 *
 * https://mozilla.org/MPL/2.0/.
 */

/*
 * Payment Initiation API
 * Swagger for Payment Initiation API Specification
 *
 * OpenAPI spec version: v3.1.2
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package uk.org.openbanking.v3_1_2.payments;

import com.fasterxml.jackson.annotation.*;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.validation.constraints.Size;
import java.util.Objects;

/**
 * Payment status details as per underlying Payment Rail.
 */
@ApiModel(description = "Payment status details as per underlying Payment Rail.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-09T18:27:25.589536+02:00[Europe/Budapest]")
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
public class OBWritePaymentDetailsResponse1DataStatusDetail {
    @JsonProperty("Status")
    private String status = null;
    @JsonProperty("LocalInstrument")
    private String localInstrument = null;
    @JsonProperty("StatusReason")
    private StatusReasonEnum statusReason = null;
    @JsonProperty("StatusReasonDescription")
    private String statusReasonDescription = null;

    public OBWritePaymentDetailsResponse1DataStatusDetail status(String status) {
        this.status = status;
        return this;
    }

    /**
     * Status of a transfer, as assigned by the transaction administrator.
     *
     * @return status
     **/
    @JsonProperty("Status")
    @ApiModelProperty(value = "Status of a transfer, as assigned by the transaction administrator.")
    @Size(min = 1, max = 128)
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public OBWritePaymentDetailsResponse1DataStatusDetail localInstrument(String localInstrument) {
        this.localInstrument = localInstrument;
        return this;
    }

    /**
     * User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
     *
     * @return localInstrument
     **/
    @JsonProperty("LocalInstrument")
    @ApiModelProperty(value = "User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.")
    public String getLocalInstrument() {
        return localInstrument;
    }

    public void setLocalInstrument(String localInstrument) {
        this.localInstrument = localInstrument;
    }

    public OBWritePaymentDetailsResponse1DataStatusDetail statusReason(StatusReasonEnum statusReason) {
        this.statusReason = statusReason;
        return this;
    }

    /**
     * Reason Code provided for the status of a transfer.
     *
     * @return statusReason
     **/
    @JsonProperty("StatusReason")
    @ApiModelProperty(value = "Reason Code provided for the status of a transfer.")
    public StatusReasonEnum getStatusReason() {
        return statusReason;
    }

    public void setStatusReason(StatusReasonEnum statusReason) {
        this.statusReason = statusReason;
    }

    public OBWritePaymentDetailsResponse1DataStatusDetail statusReasonDescription(String statusReasonDescription) {
        this.statusReasonDescription = statusReasonDescription;
        return this;
    }

    /**
     * Reason provided for the status of a transfer.
     *
     * @return statusReasonDescription
     **/
    @JsonProperty("StatusReasonDescription")
    @ApiModelProperty(value = "Reason provided for the status of a transfer.")
    @Size(min = 1, max = 256)
    public String getStatusReasonDescription() {
        return statusReasonDescription;
    }

    public void setStatusReasonDescription(String statusReasonDescription) {
        this.statusReasonDescription = statusReasonDescription;
    }

    @Override
    public int hashCode() {
        return Objects.hash(status, localInstrument, statusReason, statusReasonDescription);
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OBWritePaymentDetailsResponse1DataStatusDetail obWritePaymentDetailsResponse1DataStatusDetail = (OBWritePaymentDetailsResponse1DataStatusDetail) o;
        return Objects.equals(this.status, obWritePaymentDetailsResponse1DataStatusDetail.status) &&
                Objects.equals(this.localInstrument, obWritePaymentDetailsResponse1DataStatusDetail.localInstrument) &&
                Objects.equals(this.statusReason, obWritePaymentDetailsResponse1DataStatusDetail.statusReason) &&
                Objects.equals(this.statusReasonDescription, obWritePaymentDetailsResponse1DataStatusDetail.statusReasonDescription);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OBWritePaymentDetailsResponse1DataStatusDetail {\n");

        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    localInstrument: ").append(toIndentedString(localInstrument)).append("\n");
        sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
        sb.append("    statusReasonDescription: ").append(toIndentedString(statusReasonDescription)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Reason Code provided for the status of a transfer.
     */
    public enum StatusReasonEnum {
        CANCELLED("Cancelled"),

        PENDINGFAILINGSETTLEMENT("PendingFailingSettlement"),

        PENDINGSETTLEMENT("PendingSettlement"),

        PROPRIETARY("Proprietary"),

        PROPRIETARYREJECTION("ProprietaryRejection"),

        SUSPENDED("Suspended"),

        UNMATCHED("Unmatched");

        private String value;

        StatusReasonEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static StatusReasonEnum fromValue(String text) {
            for (StatusReasonEnum b : StatusReasonEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }
    }
}

