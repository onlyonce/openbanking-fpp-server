/*
 * This Source Code Form is subject to the terms of the Mozilla
 * Public License, v. 2.0. If a copy of the MPL was not distributed
 * with this file, You can obtain one at
 *
 * https://mozilla.org/MPL/2.0/.
 */

/*
 * Payment Initiation API
 * Swagger for Payment Initiation API Specification
 *
 * OpenAPI spec version: v3.1.2
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package uk.org.openbanking.v3_1_2.payments;

import com.fasterxml.jackson.annotation.*;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.validation.constraints.Size;
import java.util.Objects;

/**
 * Supporting Data provided by TPP, when requesting SCA Exemption.
 */
@ApiModel(description = "Supporting Data provided by TPP, when requesting SCA Exemption.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-09T18:27:25.589536+02:00[Europe/Budapest]")
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
public class OBWriteFileConsent3DataSCASupportData {
    @JsonProperty("RequestedSCAExemptionType")
    private RequestedSCAExemptionTypeEnum requestedSCAExemptionType = null;
    @JsonProperty("AppliedAuthenticationApproach")
    private AppliedAuthenticationApproachEnum appliedAuthenticationApproach = null;
    @JsonProperty("ReferencePaymentOrderId")
    private String referencePaymentOrderId = null;

    public OBWriteFileConsent3DataSCASupportData requestedSCAExemptionType(RequestedSCAExemptionTypeEnum requestedSCAExemptionType) {
        this.requestedSCAExemptionType = requestedSCAExemptionType;
        return this;
    }

    /**
     * This field allows a PISP to request specific SCA Exemption for a Payment Initiation
     *
     * @return requestedSCAExemptionType
     **/
    @JsonProperty("RequestedSCAExemptionType")
    @ApiModelProperty(value = "This field allows a PISP to request specific SCA Exemption for a Payment Initiation")
    public RequestedSCAExemptionTypeEnum getRequestedSCAExemptionType() {
        return requestedSCAExemptionType;
    }

    public void setRequestedSCAExemptionType(RequestedSCAExemptionTypeEnum requestedSCAExemptionType) {
        this.requestedSCAExemptionType = requestedSCAExemptionType;
    }

    public OBWriteFileConsent3DataSCASupportData appliedAuthenticationApproach(AppliedAuthenticationApproachEnum appliedAuthenticationApproach) {
        this.appliedAuthenticationApproach = appliedAuthenticationApproach;
        return this;
    }

    /**
     * Specifies a character string with a maximum length of 40 characters. Usage: This field indicates whether the PSU was subject to SCA performed by the TPP
     *
     * @return appliedAuthenticationApproach
     **/
    @JsonProperty("AppliedAuthenticationApproach")
    @ApiModelProperty(value = "Specifies a character string with a maximum length of 40 characters. Usage: This field indicates whether the PSU was subject to SCA performed by the TPP")
    public AppliedAuthenticationApproachEnum getAppliedAuthenticationApproach() {
        return appliedAuthenticationApproach;
    }

    public void setAppliedAuthenticationApproach(AppliedAuthenticationApproachEnum appliedAuthenticationApproach) {
        this.appliedAuthenticationApproach = appliedAuthenticationApproach;
    }

    public OBWriteFileConsent3DataSCASupportData referencePaymentOrderId(String referencePaymentOrderId) {
        this.referencePaymentOrderId = referencePaymentOrderId;
        return this;
    }

    /**
     * Specifies a character string with a maximum length of 140 characters. Usage: If the payment is recurring then the transaction identifier of the previous payment occurrence so that the ASPSP can verify that the PISP, amount and the payee are the same as the previous occurrence.
     *
     * @return referencePaymentOrderId
     **/
    @JsonProperty("ReferencePaymentOrderId")
    @ApiModelProperty(value = "Specifies a character string with a maximum length of 140 characters. Usage: If the payment is recurring then the transaction identifier of the previous payment occurrence so that the ASPSP can verify that the PISP, amount and the payee are the same as the previous occurrence.")
    @Size(min = 1, max = 128)
    public String getReferencePaymentOrderId() {
        return referencePaymentOrderId;
    }

    public void setReferencePaymentOrderId(String referencePaymentOrderId) {
        this.referencePaymentOrderId = referencePaymentOrderId;
    }

    @Override
    public int hashCode() {
        return Objects.hash(requestedSCAExemptionType, appliedAuthenticationApproach, referencePaymentOrderId);
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OBWriteFileConsent3DataSCASupportData obWriteFileConsent3DataSCASupportData = (OBWriteFileConsent3DataSCASupportData) o;
        return Objects.equals(this.requestedSCAExemptionType, obWriteFileConsent3DataSCASupportData.requestedSCAExemptionType) &&
                Objects.equals(this.appliedAuthenticationApproach, obWriteFileConsent3DataSCASupportData.appliedAuthenticationApproach) &&
                Objects.equals(this.referencePaymentOrderId, obWriteFileConsent3DataSCASupportData.referencePaymentOrderId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OBWriteFileConsent3DataSCASupportData {\n");

        sb.append("    requestedSCAExemptionType: ").append(toIndentedString(requestedSCAExemptionType)).append("\n");
        sb.append("    appliedAuthenticationApproach: ").append(toIndentedString(appliedAuthenticationApproach)).append("\n");
        sb.append("    referencePaymentOrderId: ").append(toIndentedString(referencePaymentOrderId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    /**
     * This field allows a PISP to request specific SCA Exemption for a Payment Initiation
     */
    public enum RequestedSCAExemptionTypeEnum {
        BILLPAYMENT("BillPayment"),

        CONTACTLESSTRAVEL("ContactlessTravel"),

        ECOMMERCEGOODS("EcommerceGoods"),

        ECOMMERCESERVICES("EcommerceServices"),

        KIOSK("Kiosk"),

        PARKING("Parking"),

        PARTYTOPARTY("PartyToParty");

        private String value;

        RequestedSCAExemptionTypeEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static RequestedSCAExemptionTypeEnum fromValue(String text) {
            for (RequestedSCAExemptionTypeEnum b : RequestedSCAExemptionTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }
    }

    /**
     * Specifies a character string with a maximum length of 40 characters. Usage: This field indicates whether the PSU was subject to SCA performed by the TPP
     */
    public enum AppliedAuthenticationApproachEnum {
        CA("CA"),

        SCA("SCA");

        private String value;

        AppliedAuthenticationApproachEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static AppliedAuthenticationApproachEnum fromValue(String text) {
            for (AppliedAuthenticationApproachEnum b : AppliedAuthenticationApproachEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }
    }
}

