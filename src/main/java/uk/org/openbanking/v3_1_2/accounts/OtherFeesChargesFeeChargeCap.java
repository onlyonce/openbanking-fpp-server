/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * OpenAPI spec version: v3.1.2
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package uk.org.openbanking.v3_1_2.accounts;

import com.fasterxml.jackson.annotation.*;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Details about any caps (maximum charges) that apply to a particular fee/charge
 */
@ApiModel(description = "Details about any caps (maximum charges) that apply to a particular fee/charge")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-10T09:14:46.696896+02:00[Europe/Budapest]")
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
public class OtherFeesChargesFeeChargeCap {
    @JsonProperty("CappingPeriod")
    private CappingPeriodEnum           cappingPeriod    = null;
    @JsonProperty("OtherFeeType")
    private List<OverdraftOtherFeeType> otherFeeType     = null;
    @JsonProperty("FeeType")
    private List<FeeTypeEnum>           feeType          = null;
    @JsonProperty("FeeCapOccurrence")
    private Float                       feeCapOccurrence = null;
    @JsonProperty("MinMaxType")
    private MinMaxTypeEnum              minMaxType       = null;
    @JsonProperty("Notes")
    private List<String>                notes            = null;
    @JsonProperty("FeeCapAmount")
    private String                      feeCapAmount     = null;

    public OtherFeesChargesFeeChargeCap cappingPeriod(CappingPeriodEnum cappingPeriod) {
        this.cappingPeriod = cappingPeriod;
        return this;
    }

    /**
     * Period e.g. day, week, month etc. for which the fee/charge is capped
     *
     * @return cappingPeriod
     **/
    @JsonProperty("CappingPeriod")
    @ApiModelProperty(value = "Period e.g. day, week, month etc. for which the fee/charge is capped")
    public CappingPeriodEnum getCappingPeriod() {
        return cappingPeriod;
    }

    public void setCappingPeriod(CappingPeriodEnum cappingPeriod) {
        this.cappingPeriod = cappingPeriod;
    }

    public OtherFeesChargesFeeChargeCap otherFeeType(List<OverdraftOtherFeeType> otherFeeType) {
        this.otherFeeType = otherFeeType;
        return this;
    }

    public OtherFeesChargesFeeChargeCap addOtherFeeTypeItem(OverdraftOtherFeeType otherFeeTypeItem) {
        if (this.otherFeeType == null) {
            this.otherFeeType = new ArrayList<>();
        }
        this.otherFeeType.add(otherFeeTypeItem);
        return this;
    }

    /**
     * Other fee type code which is not available in the standard code set
     *
     * @return otherFeeType
     **/
    @JsonProperty("OtherFeeType")
    @ApiModelProperty(value = "Other fee type code which is not available in the standard code set")
    public List<OverdraftOtherFeeType> getOtherFeeType() {
        return otherFeeType;
    }

    public void setOtherFeeType(List<OverdraftOtherFeeType> otherFeeType) {
        this.otherFeeType = otherFeeType;
    }

    public OtherFeesChargesFeeChargeCap feeType(List<FeeTypeEnum> feeType) {
        this.feeType = feeType;
        return this;
    }

    public OtherFeesChargesFeeChargeCap addFeeTypeItem(FeeTypeEnum feeTypeItem) {
        if (this.feeType == null) {
            this.feeType = new ArrayList<>();
        }
        this.feeType.add(feeTypeItem);
        return this;
    }

    /**
     * Fee/charge type which is being capped
     *
     * @return feeType
     **/
    @JsonProperty("FeeType")
    @ApiModelProperty(value = "Fee/charge type which is being capped")
    @Size(min = 1)
    public List<FeeTypeEnum> getFeeType() {
        return feeType;
    }

    public void setFeeType(List<FeeTypeEnum> feeType) {
        this.feeType = feeType;
    }

    public OtherFeesChargesFeeChargeCap feeCapOccurrence(Float feeCapOccurrence) {
        this.feeCapOccurrence = feeCapOccurrence;
        return this;
    }

    /**
     * fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
     *
     * @return feeCapOccurrence
     **/
    @JsonProperty("FeeCapOccurrence")
    @ApiModelProperty(value = "fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount")
    public Float getFeeCapOccurrence() {
        return feeCapOccurrence;
    }

    public void setFeeCapOccurrence(Float feeCapOccurrence) {
        this.feeCapOccurrence = feeCapOccurrence;
    }

    public OtherFeesChargesFeeChargeCap minMaxType(MinMaxTypeEnum minMaxType) {
        this.minMaxType = minMaxType;
        return this;
    }

    /**
     * Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
     *
     * @return minMaxType
     **/
    @JsonProperty("MinMaxType")
    @ApiModelProperty(value = "Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution")
    public MinMaxTypeEnum getMinMaxType() {
        return minMaxType;
    }

    public void setMinMaxType(MinMaxTypeEnum minMaxType) {
        this.minMaxType = minMaxType;
    }

    public OtherFeesChargesFeeChargeCap notes(List<String> notes) {
        this.notes = notes;
        return this;
    }

    public OtherFeesChargesFeeChargeCap addNotesItem(String notesItem) {
        if (this.notes == null) {
            this.notes = new ArrayList<>();
        }
        this.notes.add(notesItem);
        return this;
    }

    /**
     * Free text for adding  extra details for fee charge cap
     *
     * @return notes
     **/
    @JsonProperty("Notes")
    @ApiModelProperty(value = "Free text for adding  extra details for fee charge cap")
    public List<String> getNotes() {
        return notes;
    }

    public void setNotes(List<String> notes) {
        this.notes = notes;
    }

    public OtherFeesChargesFeeChargeCap feeCapAmount(String feeCapAmount) {
        this.feeCapAmount = feeCapAmount;
        return this;
    }

    /**
     * Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
     *
     * @return feeCapAmount
     **/
    @JsonProperty("FeeCapAmount")
    @ApiModelProperty(value = "Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)")
    @Pattern(regexp = "^(-?\\d{1,14}){1}(\\.\\d{1,4}){0,1}$")
    public String getFeeCapAmount() {
        return feeCapAmount;
    }

    public void setFeeCapAmount(String feeCapAmount) {
        this.feeCapAmount = feeCapAmount;
    }

    @Override
    public int hashCode() {
        return Objects.hash(cappingPeriod, otherFeeType, feeType, feeCapOccurrence, minMaxType, notes, feeCapAmount);
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OtherFeesChargesFeeChargeCap otherFeesChargesFeeChargeCap = (OtherFeesChargesFeeChargeCap) o;
        return Objects.equals(this.cappingPeriod, otherFeesChargesFeeChargeCap.cappingPeriod) &&
                Objects.equals(this.otherFeeType, otherFeesChargesFeeChargeCap.otherFeeType) &&
                Objects.equals(this.feeType, otherFeesChargesFeeChargeCap.feeType) &&
                Objects.equals(this.feeCapOccurrence, otherFeesChargesFeeChargeCap.feeCapOccurrence) &&
                Objects.equals(this.minMaxType, otherFeesChargesFeeChargeCap.minMaxType) &&
                Objects.equals(this.notes, otherFeesChargesFeeChargeCap.notes) &&
                Objects.equals(this.feeCapAmount, otherFeesChargesFeeChargeCap.feeCapAmount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OtherFeesChargesFeeChargeCap {\n");

        sb.append("    cappingPeriod: ").append(toIndentedString(cappingPeriod)).append("\n");
        sb.append("    otherFeeType: ").append(toIndentedString(otherFeeType)).append("\n");
        sb.append("    feeType: ").append(toIndentedString(feeType)).append("\n");
        sb.append("    feeCapOccurrence: ").append(toIndentedString(feeCapOccurrence)).append("\n");
        sb.append("    minMaxType: ").append(toIndentedString(minMaxType)).append("\n");
        sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
        sb.append("    feeCapAmount: ").append(toIndentedString(feeCapAmount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Period e.g. day, week, month etc. for which the fee/charge is capped
     */
    public enum CappingPeriodEnum {
        ACADEMICTERM("AcademicTerm"),

        DAY("Day"),

        HALF_YEAR("Half Year"),

        MONTH("Month"),

        QUARTER("Quarter"),

        WEEK("Week"),

        YEAR("Year");

        private String value;

        CappingPeriodEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static CappingPeriodEnum fromValue(String text) {
            for (CappingPeriodEnum b : CappingPeriodEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }
    }


    /**
     * Fee/charge type which is being capped
     */
    public enum FeeTypeEnum {
        SERVICECACCOUNTFEE("ServiceCAccountFee"),

        SERVICECACCOUNTFEEMONTHLY("ServiceCAccountFeeMonthly"),

        SERVICECOTHER("ServiceCOther"),

        OTHER("Other");

        private String value;

        FeeTypeEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static FeeTypeEnum fromValue(String text) {
            for (FeeTypeEnum b : FeeTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }
    }

    /**
     * Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
     */
    public enum MinMaxTypeEnum {
        MINIMUM("Minimum"),

        MAXIMUM("Maximum");

        private String value;

        MinMaxTypeEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static MinMaxTypeEnum fromValue(String text) {
            for (MinMaxTypeEnum b : MinMaxTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }
    }
}

