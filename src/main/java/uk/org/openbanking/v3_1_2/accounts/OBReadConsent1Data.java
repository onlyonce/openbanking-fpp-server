/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * OpenAPI spec version: v3.1.2
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package uk.org.openbanking.v3_1_2.accounts;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModelProperty;

import javax.validation.constraints.Size;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * OBReadConsent1Data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2019-07-10T09:14:46.696896+02:00[Europe/Budapest]")
public class OBReadConsent1Data {
    @JsonProperty("TransactionToDateTime")
    private String transactionToDateTime = null;

    @JsonProperty("ExpirationDateTime")
    private String                expirationDateTime      = null;
    @JsonProperty("Permissions")
    private List<PermissionsEnum> permissions             = null;
    @JsonProperty("TransactionFromDateTime")
    private String                transactionFromDateTime = null;

    public OBReadConsent1Data transactionToDateTime(String transactionToDateTime) {
        this.transactionToDateTime = transactionToDateTime;
        return this;
    }

    /**
     * Specified end date and time for the transaction query period. If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @return transactionToDateTime
     **/
    @JsonProperty("TransactionToDateTime")
    @ApiModelProperty(value = "Specified end date and time for the transaction query period. If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00")
    public String getTransactionToDateTime() {
        return transactionToDateTime;
    }

    public void setTransactionToDateTime(String transactionToDateTime) {
        this.transactionToDateTime = transactionToDateTime;
    }

    public OBReadConsent1Data expirationDateTime(String expirationDateTime) {
        this.expirationDateTime = expirationDateTime;
        return this;
    }

    /**
     * Specified date and time the permissions will expire. If this is not populated, the permissions will be open ended.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @return expirationDateTime
     **/
    @JsonProperty("ExpirationDateTime")
    @ApiModelProperty(value = "Specified date and time the permissions will expire. If this is not populated, the permissions will be open ended.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00")
    public String getExpirationDateTime() {
        return expirationDateTime;
    }

    public void setExpirationDateTime(String expirationDateTime) {
        this.expirationDateTime = expirationDateTime;
    }

    public OBReadConsent1Data permissions(List<PermissionsEnum> permissions) {
        this.permissions = permissions;
        return this;
    }

    public OBReadConsent1Data addPermissionsItem(PermissionsEnum permissionsItem) {
        if (this.permissions == null) {
            this.permissions = new ArrayList<>();
        }
        this.permissions.add(permissionsItem);
        return this;
    }

    /**
     * Get permissions
     *
     * @return permissions
     **/
    @JsonProperty("Permissions")
    @ApiModelProperty(value = "")
    @Size(min = 1)
    public List<PermissionsEnum> getPermissions() {
        return permissions;
    }

    public void setPermissions(List<PermissionsEnum> permissions) {
        this.permissions = permissions;
    }

    public OBReadConsent1Data transactionFromDateTime(String transactionFromDateTime) {
        this.transactionFromDateTime = transactionFromDateTime;
        return this;
    }

    /**
     * Specified start date and time for the transaction query period. If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     *
     * @return transactionFromDateTime
     **/
    @JsonProperty("TransactionFromDateTime")
    @ApiModelProperty(value = "Specified start date and time for the transaction query period. If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00")
    public String getTransactionFromDateTime() {
        return transactionFromDateTime;
    }

    public void setTransactionFromDateTime(String transactionFromDateTime) {
        this.transactionFromDateTime = transactionFromDateTime;
    }

    @Override
    public int hashCode() {
        return Objects.hash(transactionToDateTime, expirationDateTime, permissions, transactionFromDateTime);
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OBReadConsent1Data obReadConsent1Data = (OBReadConsent1Data) o;
        return Objects.equals(this.transactionToDateTime, obReadConsent1Data.transactionToDateTime) &&
                Objects.equals(this.expirationDateTime, obReadConsent1Data.expirationDateTime) &&
                Objects.equals(this.permissions, obReadConsent1Data.permissions) &&
                Objects.equals(this.transactionFromDateTime, obReadConsent1Data.transactionFromDateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OBReadConsent1Data {\n");

        sb.append("    transactionToDateTime: ").append(toIndentedString(transactionToDateTime)).append("\n");
        sb.append("    expirationDateTime: ").append(toIndentedString(expirationDateTime)).append("\n");
        sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
        sb.append("    transactionFromDateTime: ").append(toIndentedString(transactionFromDateTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Specifies the Open Banking account access data types. This is a list of the data clusters being consented by the PSU, and requested for authorisation with the ASPSP.
     */
    public enum PermissionsEnum {
        READACCOUNTSBASIC("ReadAccountsBasic"),

        READACCOUNTSDETAIL("ReadAccountsDetail"),

        READBALANCES("ReadBalances"),

        READBENEFICIARIESBASIC("ReadBeneficiariesBasic"),

        READBENEFICIARIESDETAIL("ReadBeneficiariesDetail"),

        READDIRECTDEBITS("ReadDirectDebits"),

        READOFFERS("ReadOffers"),

        READPAN("ReadPAN"),

        READPARTY("ReadParty"),

        READPARTYPSU("ReadPartyPSU"),

        READPRODUCTS("ReadProducts"),

        READSCHEDULEDPAYMENTSBASIC("ReadScheduledPaymentsBasic"),

        READSCHEDULEDPAYMENTSDETAIL("ReadScheduledPaymentsDetail"),

        READSTANDINGORDERSBASIC("ReadStandingOrdersBasic"),

        READSTANDINGORDERSDETAIL("ReadStandingOrdersDetail"),

        READSTATEMENTSBASIC("ReadStatementsBasic"),

        READSTATEMENTSDETAIL("ReadStatementsDetail"),

        READTRANSACTIONSBASIC("ReadTransactionsBasic"),

        READTRANSACTIONSCREDITS("ReadTransactionsCredits"),

        READTRANSACTIONSDEBITS("ReadTransactionsDebits"),

        READTRANSACTIONSDETAIL("ReadTransactionsDetail");

        private String value;

        PermissionsEnum(String value) {
            this.value = value;
        }

        @JsonCreator
        public static PermissionsEnum fromValue(String text) {
            for (PermissionsEnum b : PermissionsEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + text + "'");
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }
    }
}

